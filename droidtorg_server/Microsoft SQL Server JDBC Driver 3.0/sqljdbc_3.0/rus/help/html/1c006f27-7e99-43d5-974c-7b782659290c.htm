<html DIR="LTR" xmlns:tool="http://www.microsoft.com/tooltip" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8" />
    <META NAME="save" CONTENT="history" />
    <title>Использование хранимых процедур с выходными параметрами</title>
    
    <link rel="stylesheet" type="text/css" href="../local/Classic.css">
      
    </link>
    
    <script src="../local/script.js">
      
    </script><script src="../local/script_main.js">&amp;nbsp;</script>
  </head>
  <body>
    <!--Topic built:04/01/2010 05:03:29-->

    
    
    
    
    
    
    
    
    
    <div id="header">
      <table width="100%" id="topTable"><tr>
          <td align="left">
            <span id="headerBold">Использование хранимых процедур с выходными параметрами</span>
          </td>
          <td align="right">
            
          </td>
        </tr></table>
      
      
      
    </div>
    <div id="mainSection">
      
        
        
    <font color="DarkGray">
      
    </font>
    <p />
    
    <p />
  
        <div id="introductionSection" class="section">
    <p>Вызываемая хранимая процедура SQL Server — это процедура, возвращающая один или несколько параметров OUT, т.е. параметров, используемых хранимой процедурой для возврата данных вызывающему приложению. Драйвер JDBC Microsoft SQL Server предоставляет класс <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a>, который можно использовать для вызова этого типа хранимой процедуры и обработки возвращаемых ею данных. </p>
    <p>При вызове хранимой процедуры этого типа с помощью драйвера JDBC следует использовать<code> call </code> escape-последовательность SQL совместно с методом <a href="265b024c-898a-4bd0-98b5-f06076717b9e.htm">prepareCall</a> класса <a href="937292a6-1525-423e-a2b2-a18fd34c2893.htm">SQLServerConnection</a>. Ниже приводится синтаксис escape-последовательности <code>call</code> с параметрами OUT:</p>
    <p>
      <code>{call procedure-name[([parameter][,[parameter]]...)]}</code>
    </p>
    <div style="margin: .5em 1.5em .5em 1.5em"><b>Примечание. </b>
      Дополнительные сведения об escape-последовательностях SQL см. в разделе <a href="00f9e25a-088e-4ac6-aa75-43eacace8f03.htm">Использование Escape-последовательностей SQL</a>.<p />
    </div>
    <p>При создании escape-последовательности <code> call </code> укажите параметры OUT при помощи символа «?». символ вопросительного знака (?). Этот символ выполняет роль заполнителя для значений параметра, которые будут возвращены из хранимой процедуры. Чтобы указать значение параметра OUT, необходимо указать тип данных всех параметров, с помощью метода <a href="82f8d608-efc1-4af8-a985-ec25d19420aa.htm">registerOutParameter</a> класса <b>SQLServerCallableStatement</b> до выполнения хранимой процедуры. </p>
    <p>Значение, указываемое для параметра OUT в методе <b>registerOutParameter</b>, должно представлять собой один из типов данных JDBC, содержащихся в java.sql.Types, который в свою очередь выполняет сопоставление с одним из собственных типов данных SQL Server. Дополнительные сведения о JDBC и типах данных SQL Server см. в разделе <a href="7802328d-4d23-4775-9573-4169b127d258.htm">Основные сведения о типах данных драйвера JDBC</a>.</p>
    <p>При передаче значения методу <b>registerOutParameter</b> для параметра OUT необходимо указать не только тип данных, который будет использоваться для параметра, но также порядковое размещение или имя параметра в хранимой процедуре. Например, если в хранимой процедуре имеется один параметр OUT, то первое порядковое значение будет 1, а второе порядковое значение — 2.</p>
    <div style="margin: .5em 1.5em .5em 1.5em"><b>Примечание. </b>
      Драйвер JDBC не поддерживает использование типов данных CURSOR, SQLVARIANT, TABLE и TIMESTAMP SQL Server в качестве параметров OUT.<p />
    </div>
    <p>Для примера создайте следующую хранимую процедуру в образце базы данных SQL Server 2005 AdventureWorks.</p>
    <div class="sampleCode"><span codeLanguage="other"><pre>CREATE PROCEDURE GetImmediateManager
   @employeeID INT,
   @managerID INT OUTPUT
AS
BEGIN
   SELECT @managerID = ManagerID 
   FROM HumanResources.Employee 
   WHERE EmployeeID = @employeeID
END</pre></span></div>
    <p>Эта хранимая процедура возвращает один параметр OUT (managerID), являющийся целым числом, на основе указанного параметра IN (employeeID), которое также является целым числом. Значение, возвращаемое в параметре OUT, представляет собой ManagerID, основанный на EmployeeID, который содержится в таблице HumanResources.Employee. </p>
    <p>В следующем примере открытое соединение с образцом базы данных AdventureWorks передается в функцию, а метод <a href="e1367f39-23d7-4e26-b160-6d988d7e6988.htm">execute</a> используется для вызова хранимой процедуры GetImmediateManager:</p>
    <div class="sampleCode"><span codeLanguage="other"><pre>public static void executeStoredProcedure(Connection con) {
   try {
      CallableStatement cstmt = con.prepareCall("{call dbo.GetImmediateManager(?, ?)}");
      cstmt.setInt(1, 5);
      cstmt.registerOutParameter(2, java.sql.Types.INTEGER);
      cstmt.execute();
      System.out.println("MANAGER ID: " + cstmt.getInt(2));
   }
   catch (Exception e) {
      e.printStackTrace();
   }
}</pre></span></div>
    <p>В примере для определения параметров используются порядковые местоположения. Или можно определить параметр при использовании имени вместо порядкового местоположения. В следующем примере кода изменяется предыдущий пример для иллюстрации использования именованных параметров в приложении Java. Обратите внимание, что имена параметров соответствуют именам параметров в определении хранимой процедуры:</p>
    <div class="sampleCode"><span codeLanguage="other"><pre>public static void executeStoredProcedure(Connection con) {
   try {
      CallableStatement cstmt = con.prepareCall("{call dbo.GetImmediateManager(?, ?)}");
      cstmt.setInt("employeeID", 5);
      cstmt.registerOutParameter("managerID", java.sql.Types.INTEGER);
      cstmt.execute();
      System.out.println("MANAGER ID: " + cstmt.getInt("managerID"));
      cstmt.close();
   }
   catch (Exception e) {
      e.printStackTrace();
   }</pre></span></div>
    <p>}</p>
    <div style="margin: .5em 1.5em .5em 1.5em"><b>Примечание. </b>
      В этих примерах используется метод <b>execute</b> класса  <b>SQLServerCallableStatement</b> для запуска хранимой процедуры. Он используется, поскольку хранимая процедура не возвратила результирующий набор. Если она возвратила результирующий набор, будет использован метод <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a>.<p />
    </div>
    <p>Хранимые процедуры могут возвращать счетчики обновлений и несколько результирующих наборов. Драйвер JDBC Microsoft SQL Server соответствует спецификации JDBC 3.0, для которой указана необходимость извлечения нескольких результирующих наборов и счетчиков обновления до извлечения параметров OUT. Таким образом, приложение должно извлечь все объекты и счетчики обновления <b>ResultSet</b> до извлечения параметров OUT при использовании методов <b>CallableStatement.getter</b>. В противном случае объекты и счетчики обновления <b>ResultSet</b>, которые не были извлечены, будут потеряны при извлечении параметров OUT. Дополнительные сведения о счетчиках обновления и нескольких результирующих наборах см. в разделах <a href="64cf4877-5995-4bfc-8865-b7618a5c8d01.htm">Использование хранимых процедур со счетчиком обновлений</a> и <a href="ab6a3cfa-073b-44e9-afca-a8675cfe5fd1.htm">Использование нескольких результирующих наборов</a>.</p>
  </div><span id="seeAlsoSpan"><h1 class="heading">См. также</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection"><a href="0041f9e1-09b6-4487-b052-afd636c8e89a.htm">Использование инструкций с хранимыми процедурами</a><br /><br /></div><!--[if gte IE 5]>
			<tool:tip element="seeAlsoToolTip" avoidmouse="false"/><tool:tip element="languageFilterToolTip" avoidmouse="false"/><tool:tip element="roleInfoSpan" avoidmouse="false"/>
		<![endif]-->
      <div id="footer" class="section">
        
		<hr />
		
		<span id="fb" class="feedbackcss">
			
			
		</span>
		
		<a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">
			
			© Корпорация Майкрософт (Microsoft Corporation), 2010. Все права защищены.
		</a>
 	
	
      </div>
    </div>
  </body>
</html>